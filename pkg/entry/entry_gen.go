package entry

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *LogEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			z.Line, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Line")
				return
			}
		case "s":
			z.Stream, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Stream")
				return
			}
		case "t":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "m":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Matches")
				return
			}
			if cap(z.Matches) >= int(zb0002) {
				z.Matches = (z.Matches)[:zb0002]
			} else {
				z.Matches = make([][]int, zb0002)
			}
			for za0001 := range z.Matches {
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Matches", za0001)
					return
				}
				if cap(z.Matches[za0001]) >= int(zb0003) {
					z.Matches[za0001] = (z.Matches[za0001])[:zb0003]
				} else {
					z.Matches[za0001] = make([]int, zb0003)
				}
				for za0002 := range z.Matches[za0001] {
					z.Matches[za0001][za0002], err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Matches", za0001, za0002)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LogEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Matches == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "l"
		err = en.Append(0xa1, 0x6c)
		if err != nil {
			return
		}
		err = en.WriteString(z.Line)
		if err != nil {
			err = msgp.WrapError(err, "Line")
			return
		}
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteString(z.Stream)
		if err != nil {
			err = msgp.WrapError(err, "Stream")
			return
		}
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Timestamp)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp")
			return
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "m"
			err = en.Append(0xa1, 0x6d)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Matches)))
			if err != nil {
				err = msgp.WrapError(err, "Matches")
				return
			}
			for za0001 := range z.Matches {
				err = en.WriteArrayHeader(uint32(len(z.Matches[za0001])))
				if err != nil {
					err = msgp.WrapError(err, "Matches", za0001)
					return
				}
				for za0002 := range z.Matches[za0001] {
					err = en.WriteInt(z.Matches[za0001][za0002])
					if err != nil {
						err = msgp.WrapError(err, "Matches", za0001, za0002)
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LogEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Matches == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "l"
		o = append(o, 0xa1, 0x6c)
		o = msgp.AppendString(o, z.Line)
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendString(o, z.Stream)
		// string "t"
		o = append(o, 0xa1, 0x74)
		o = msgp.AppendInt64(o, z.Timestamp)
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Matches)))
			for za0001 := range z.Matches {
				o = msgp.AppendArrayHeader(o, uint32(len(z.Matches[za0001])))
				for za0002 := range z.Matches[za0001] {
					o = msgp.AppendInt(o, z.Matches[za0001][za0002])
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			z.Line, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Line")
				return
			}
		case "s":
			z.Stream, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Stream")
				return
			}
		case "t":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "m":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Matches")
				return
			}
			if cap(z.Matches) >= int(zb0002) {
				z.Matches = (z.Matches)[:zb0002]
			} else {
				z.Matches = make([][]int, zb0002)
			}
			for za0001 := range z.Matches {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Matches", za0001)
					return
				}
				if cap(z.Matches[za0001]) >= int(zb0003) {
					z.Matches[za0001] = (z.Matches[za0001])[:zb0003]
				} else {
					z.Matches[za0001] = make([]int, zb0003)
				}
				for za0002 := range z.Matches[za0001] {
					z.Matches[za0001][za0002], bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Matches", za0001, za0002)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LogEntry) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Line) + 2 + msgp.StringPrefixSize + len(z.Stream) + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Matches {
		s += msgp.ArrayHeaderSize + (len(z.Matches[za0001]) * (msgp.IntSize))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LogList) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(LogList, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LogList) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LogList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(LogList, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LogList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}
